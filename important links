React notes google drive:
https://drive.google.com/drive/folders/1al9hSROpRJId4JBFrzLLxlHjYMhZVNAZ?usp=drive_link

____________________________________________________________________________________________________

https://github.com/Sanjaykumar3003/BNT_TASK_Repo.git

https://github.com/Sanjaykumar3003/BNT_TASK_Repo/blob/master/BNT-Bootstarp2.txt

https://github.com/asis2003/jsbasics.git

https://github.com/dhanushkumar-dk/bnt-tasks/tree/main/React_Notes_Day15_Thursday

https://github.com/dhanushkumar-dk/bnt-tasks/tree/main/React_Notes_Day_16

____________________________________________________________________________________

Your task is to create a React component that fetches and displays user information from an API. Specifically, the component should make a GET request to "https://jsonplaceholder.typicode.com/users/1" and display the fetched user's name, email, and username. The component should initially display a loading placeholder text until the data is fetched successfully.

Functional Requirements
Data Fetching:

Implement an asynchronous operation within the component to fetch user data from the provided URL upon component mounting.
State Management:

Utilize React's useState hook to manage the fetched data state within your component.
Effect Hook:

Use React's useEffect hook to trigger the data fetching operation when the component mounts. Ensure that the fetching operation is performed only once.
Conditional Rendering:

Display a placeholder text (<h2>Loading dataâ€¦</h2>) while the data is being fetched.
Once the data is fetched, display the user's name, email, and username.
If there is an error, show the error like (<h2>Error fetching data</h2>)

_______________________________________________________________________________________

https://dhanushkumar-dk.github.io/ClassVFunction/

https://github.com/ravikantt45/BNT_ASSESMENT-_TRAINING/tree/main/Router

public class ContainerWithMostWater {
    public static int maxArea(int[] height) {
        int maxArea = 0;
        int left = 0;
        int right = height.length - 1;

        while (left < right) {
            int minHeight = Math.min(height[left], height[right]);
            int width = right - left;
            int area = minHeight * width;
            maxArea = Math.max(maxArea, area);

            // Move the smaller height pointer
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }

    public static void main(String[] args) {
        int[] height = {1, 8, 6, 2, 5, 4, 8, 3, 7};
        int result = maxArea(height);
        System.out.println("Maximum water that can be contained: " + result);
    }
}

package com.example.javaBasics.serializationAndDeSerialization;

import java.io.*;

public class MainClass {
    public static void main(String[] args) {
        // Create an object
        Student student = new Student("Harsh", 25);

        // Serialization
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("student.ser"))) {
            out.writeObject(student);
            System.out.println("Object serialized successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Deserialization
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("student.ser"))) {
            Student deserializedStudent = (Student) in.readObject();
            System.out.println("Object deserialized successfully.");
            System.out.println("Name: " + deserializedStudent.name);
            System.out.println("Age: " + deserializedStudent.age);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

package com.example.javaBasics;

import java.io.*;

public class StreamTypes {
    public static void main(String[] args) {
        String text = "Hello, this is a file stream demo in Java.";

        // 1. Byte Stream: Write using FileOutputStream
        try (FileOutputStream fos = new FileOutputStream("bytefile.txt")) {
            fos.write(text.getBytes());
            System.out.println("Written to bytefile.txt using FileOutputStream");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // 2. Byte Stream: Read using FileInputStream
        try (FileInputStream fis = new FileInputStream("bytefile.txt")) {
            int ch;
            System.out.print("Read from bytefile.txt: ");
            while ((ch = fis.read()) != -1) {
                System.out.print((char) ch);
            }
            System.out.println();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // 3. Character Stream: Write using FileWriter
        try (FileWriter writer = new FileWriter("charfile.txt")) {
            writer.write(text);
            System.out.println("Written to charfile.txt using FileWriter");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // 4. Character Stream: Read using FileReader
        try (FileReader reader = new FileReader("charfile.txt")) {
            int ch;
            System.out.print("Read from charfile.txt: ");
            while ((ch = reader.read()) != -1) {
                System.out.print((char) ch);
            }
            System.out.println();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // 5. Buffered Streams: Efficient reading/writing
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("buffered.txt"));
             BufferedReader br = new BufferedReader(new FileReader("buffered.txt"))) {
            bw.write("Buffered Writer example.");
            bw.newLine();
            bw.write("Second line.");
            bw.flush();
            System.out.println("Written to buffered.txt using BufferedWriter");

            System.out.println("Read from buffered.txt using BufferedReader:");
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

create table customer(
customer_id int auto_increment primary key,
customer_name varchar(50) not null,
phn_no bigint(10),
enrollment_date timestamp default current_timestamp,
date_of_birth date,
email varchar(100) unique,
marks int,
mark_percentage decimal(5,2),
check (mark_percentage between 1 and 100)
);

